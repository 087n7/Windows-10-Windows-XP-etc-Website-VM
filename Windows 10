#include <iostream>
#include <vector>
#include <string>
#include <cctype>
using namespace std;

vector<string> getAscii(char c) {
    switch (toupper(c)) {
        case 'A': return {
            "  ___  ",
            " / _ \\ ",
            "/ /_\\ \\",
            "|  _  |",
            "| | | |",
            "\\_| |_/"
        };
        case 'B': return {
            "______ ",
            "| ___ \\",
            "| |_/ /",
            "| ___ \\",
            "| |_/ /",
            "\\____/ "
        };
        case 'C': return {
            " _____ ",
            "/  __ \\",
            "| /  \\/",
            "| |    ",
            "| \\__/\\",
            " \\____/"
        };
        case 'D': return {
            "______ ",
            "|  _  \\",
            "| | | |",
            "| | | |",
            "| |/ / ",
            "|___/  "
        };
        case 'E': return {
            "______ ",
            "|  ___|",
            "| |_   ",
            "|  _|  ",
            "| |___ ",
            "\\____/ "
        };
        case 'F': return {
            "______ ",
            "|  ___|",
            "| |_   ",
            "|  _|  ",
            "| |    ",
            "\\_|    "
        };
        case 'G': return {
            " _____ ",
            "|  __ \\",
            "| |  \\/",
            "| | __ ",
            "| |_\\ \\",
            " \\____/"
        };
        case 'H': return {
            " _   _ ",
            "| | | |",
            "| |_| |",
            "|  _  |",
            "| | | |",
            "\\_| |_/"
        };
        case 'I': return {
            " _____ ",
            "|_   _|",
            "  | |  ",
            "  | |  ",
            " _| |_ ",
            " \\___/ "
        };
        case 'J': return {
            "     _ ",
            "    | |",
            "    | |",
            "/\\_/ / ",
            "\\___/  ",
            "       "
        };
        case 'K': return {
            " _   __",
            "| | / /",
            "| |/ / ",
            "|    \\ ",
            "| |\\  \\",
            "\\_| \\_/"
        };
        case 'L': return {
            " _     ",
            "| |    ",
            "| |    ",
            "| |    ",
            "| |___ ",
            "\\____/ "
        };
        case 'M': return {
            "___  ___",
            "|  \\/  |",
            "| .  . |",
            "| |\\/| |",
            "| |  | |",
            "\\_|  |_/"
        };
        case 'N': return {
            " _   _ ",
            "| \\ | |",
            "|  \\| |",
            "| . ` |",
            "| |\\  |",
            "\\_| \\_/"
        };
        case 'O': return {
            " _____ ",
            "|  _  |",
            "| | | |",
            "| | | |",
            "| |/ / ",
            "|___/  "
        };
        case 'P': return {
            "______ ",
            "| ___ \\",
            "| |_/ /",
            "|  __/ ",
            "| |    ",
            "\\_|    "
        };
        case 'Q': return {
            " _____ ",
            "|  _  |",
            "| | | |",
            "| | | |",
            "| |/ / ",
            "|_/\\_\\ "
        };
        case 'R': return {
            "______ ",
            "| ___ \\",
            "| |_/ /",
            "|    / ",
            "| |\\ \\ ",
            "\\_| \\_|"
        };
        case 'S': return {
            " _____ ",
            "/  ___|",
            "\\ `--. ",
            " `--. \\",
            "/\\__/ /",
            "\\____/ "
        };
        case 'T': return {
            "______ ",
            "|_   _|",
            "  | |  ",
            "  | |  ",
            "  | |  ",
            "  \\_/  "
        };
        case 'U': return {
            " _   _ ",
            "| | | |",
            "| | | |",
            "| | | |",
            "| |_| |",
            " \\___/ "
        };
        case 'V': return {
            " _   _ ",
            "| | | |",
            "| | | |",
            "| | | |",
            "\\ \\_/ /",
            " \\___/ "
        };
        case 'W': return {
            " _    _ ",
            "| |  | |",
            "| |  | |",
            "| |/\\| |",
            "\\  /\\  /",
            " \\/  \\/ "
        };
        case 'X': return {
            "__   __",
            "\\ \\ / /",
            " \\ V / ",
            " /   \\ ",
            "/ /^\\ \\",
            "\\/   \\/"
        };
        case 'Y': return {
            "__   __",
            "\\ \\ / /",
            " \\ V / ",
            "  \\ /  ",
            "  | |  ",
            "  \\_/  "
        };
        case 'Z': return {
            "______ ",
            "|___  /",
            "   / / ",
            "  / /  ",
            "./ /___",
            "\\_____/"
        };
        case ' ': return {
            "       ",
            "       ",
            "       ",
            "       ",
            "       ",
            "       "
        };
        default: return {
            " _____ ",
            "|     |",
            "| ??? |",
            "|     |",
            "|_____|",
            "       "
        };
    }
}

int main() {
    string input;
    cout << "Enter text: ";
    getline(cin, input);

    const int height = 6;
    vector<string> ascii_lines(height, "");

    for (char c : input) {
        vector<string> art = getAscii(c);
        for (int i = 0; i < height; ++i) {
            ascii_lines[i] += art[i] + "  ";
        }
    }

    cout << endl;
    for (const string& line : ascii_lines) {
        cout << line << endl;
    }

    return 0;
}
