<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Windows 10 Mockup</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <style>
        :root {
            --taskbar-height: 56px;
            --taskbar-bg: rgba(20, 20, 20, 0.95);
            --start-menu-bg: rgba(30, 30, 30, 0.98);
            --window-bg: #2c2c2c;
            --window-border: #444;
            --window-title-bar-bg: #1c1c1c;
            --text-color-light: #f1f1f1;
            --text-color-dark: #f1f1f1;
            --hover-bg: rgba(255, 255, 255, 0.1);
            --font-family: 'Segoe UI', Arial, sans-serif;
            --icon-size: 64px;
        }

        body {
            margin: 0;
            font-family: var(--font-family);
            height: 100vh;
            overflow: hidden;
            user-select: none;
            cursor: default;
            background: #000;
        }

        /* Login Screen Styles */
        #login-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background: url('https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows%2010.png?raw=true') no-repeat center center fixed;
            background-size: cover;
            flex-direction: column;
            color: var(--text-color-light);
            z-index: 2000;
            transition: opacity 0.5s ease-in-out;
        }

        #login-screen.fade-out {
            opacity: 0;
            pointer-events: none;
        }

        .login-box {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            text-align: center;
            background: rgba(0, 0, 0, 0.2);
            padding: 40px;
            backdrop-filter: blur(10px);
        }

        .login-box h1 {
            font-size: 2.5em;
            margin: 0;
            text-shadow: 0 0 5px rgba(0,0,0,0.5);
        }

        .login-box .user-icon {
            font-size: 80px;
            border-radius: 50%;
            border: 2px solid #fff;
            padding: 10px;
        }

        .login-box .input-group {
            display: flex;
            align-items: center;
            background: var(--text-color-dark);
            padding: 5px 15px;
        }

        .login-box input {
            background: transparent;
            border: none;
            outline: none;
            color: #000;
            font-size: 1em;
            padding: 8px;
            width: 200px;
        }

        .login-box input::placeholder {
            color: #777;
        }

        .login-box button {
            background: #0078d7;
            color: #fff;
            border: none;
            padding: 10px 30px;
            font-size: 1em;
            cursor: pointer;
            transition: background 0.2s;
        }

        .login-box button:hover {
            background: #005a9e;
        }

        /* Desktop Styles */
        .desktop-container {
            height: 100vh;
            background: #000;
            position: relative;
            z-index: 1;
        }

        .desktop {
            height: calc(100vh - var(--taskbar-height));
            padding: 30px 20px;
            display: grid;
            grid-auto-flow: column;
            grid-template-rows: repeat(auto-fill, 100px);
            align-content: flex-start;
            gap: 20px;
            position: relative;
        }

        .virtual-desktop {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: none;
        }

        .virtual-desktop.active {
            display: block;
        }

        .icon {
            width: 80px;
            height: 90px;
            text-align: center;
            color: var(--text-color-light);
            cursor: pointer;
            text-shadow: 1px 1px 2px #000;
            transition: background 0.2s;
            padding: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .icon:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .icon img {
            width: var(--icon-size);
            margin-bottom: 5px;
            filter: drop-shadow(1px 1px 2px #000);
        }

        /* Taskbar */
        .taskbar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: var(--taskbar-height);
            background: var(--taskbar-bg);
            display: flex;
            align-items: center;
            padding: 0 8px;
            box-shadow: 0 -1px 8px rgba(0, 0, 0, 0.5);
            z-index: 100;
        }

        .taskbar-start {
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 0 10px;
            transition: background 0.2s;
        }

        .taskbar-start img {
            width: 40px;
            transition: transform 0.2s;
        }

        .taskbar-start:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        /* Updated Search Box Styles */
        .taskbar-search {
            margin-left: 10px;
            display: flex;
            align-items: center;
            background: white; /* Changed to white */
            border: 1px solid #ccc; /* Lighter border for contrast */
            padding: 8px 16px;
            min-width: 250px;
            height: 38px;
        }

        .taskbar-search i {
            color: #555; /* Changed to a darker color for contrast */
            margin-right: 10px;
        }

        .taskbar-search input {
            background: transparent;
            color: #000; /* Changed to black for contrast */
            border: none;
            width: 100%;
            font-size: 16px;
            outline: none;
        }

        .taskbar-search input::placeholder {
            color: #555; /* Changed to a darker color for contrast */
        }
        /* End of Updated Search Box Styles */

        .taskbar-icons {
            display: flex;
            align-items: center;
            margin-left: 10px;
        }
        
        .taskbar-pinned {
            display: flex;
            align-items: center;
            margin-left: 10px;
        }

        .taskbar-item {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
            border-bottom: 2px solid transparent;
            cursor: pointer;
            position: relative;
        }

        .taskbar-item:hover {
            background: var(--hover-bg);
        }

        .taskbar-item.active {
            border-color: #00a0e2;
        }

        .taskbar-item img {
            width: 32px;
        }

        .taskbar-right {
            display: flex;
            align-items: center;
            margin-left: auto;
            gap: 12px;
            font-size: 15px;
            color: var(--text-color-light);
            padding-right: 12px;
        }

        .taskbar-notification {
            height: 100%;
            padding: 0 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
        }

        .taskbar-notification:hover {
            background: var(--hover-bg);
        }

        .taskbar-notification i {
            font-size: 20px;
        }

        .taskbar-time {
            padding: 0 10px;
            line-height: 1.2;
            text-align: right;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .taskbar-time:hover {
            background: var(--hover-bg);
        }

        /* Start Menu */
        .start-menu {
            position: fixed;
            bottom: calc(var(--taskbar-height) + 8px);
            left: 12px;
            width: 600px;
            height: 560px;
            background: var(--start-menu-bg);
            box-shadow: 0 2px 16px rgba(0, 0, 0, 0.7);
            color: var(--text-color-light);
            display: none;
            flex-direction: row;
            z-index: 1000;
            animation: fadeIn 0.2s;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .start-menu-left {
            width: 60px;
            display: flex;
            flex-direction: column;
            background: #2a2a2a;
        }

        .start-menu-left .power-icon {
            margin-top: auto;
            padding: 15px 0;
            text-align: center;
            cursor: pointer;
            transition: background 0.2s;
        }

        .start-menu-left .power-icon:hover {
            background: var(--hover-bg);
        }

        .start-menu-left .power-icon i {
            font-size: 22px;
        }

        .start-menu-right {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .start-menu-header {
            padding: 16px;
            font-size: 1.2em;
            font-weight: bold;
            border-bottom: 1px solid #444;
        }

        .start-menu-apps {
            width: 280px;
            padding: 12px 0;
            overflow-y: auto;
        }

        .start-menu-app {
            display: flex;
            align-items: center;
            padding: 8px 18px;
            cursor: pointer;
            transition: background 0.15s;
        }

        .start-menu-app:hover {
            background: var(--hover-bg);
        }

        .start-menu-app img {
            width: 28px;
            margin-right: 10px;
        }

        .start-menu-tiles {
            flex-grow: 1;
            display: flex;
            flex-wrap: wrap;
            align-content: flex-start;
            gap: 8px;
            padding: 12px;
            overflow-y: auto;
            background: #202020;
            border-left: 1px solid #444;
        }

        .tile {
            width: 140px;
            height: 140px;
            background: #0078d7;
            color: #fff;
            position: relative;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .tile:hover {
            transform: scale(1.05);
        }

        .tile-content {
            padding: 10px;
            font-size: 0.9em;
        }

        .tile-small {
            width: 66px;
            height: 66px;
        }

        .tile-medium {
            width: 140px;
            height: 140px;
        }

        .tile-large {
            width: 290px;
            height: 140px;
        }

        .tile-wide {
            width: 290px;
            height: 140px;
        }

        /* Search/Cortana Flyout */
        #cortana-flyout {
            position: fixed;
            bottom: var(--taskbar-height);
            left: 8px;
            width: 480px;
            height: calc(100vh - var(--taskbar-height) - 16px);
            background: #202020;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.5);
            display: none;
            flex-direction: column;
            z-index: 1000;
            animation: slideUp 0.2s;
            color: var(--text-color-light);
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .cortana-search-box {
            padding: 10px;
            border-bottom: 1px solid #444;
            display: flex;
            align-items: center;
        }

        .cortana-search-box input {
            background: transparent;
            border: none;
            color: #fff;
            flex-grow: 1;
            font-size: 1.2em;
            padding: 8px;
            outline: none;
        }

        .cortana-search-box i {
            color: #ccc;
            margin-right: 10px;
        }

        /* Window */
        .window {
            position: absolute;
            top: 10%;
            left: 20%;
            width: 500px;
            height: 400px;
            background: var(--window-bg);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--window-border);
            font-family: var(--font-family);
            z-index: 999;
            display: none;
            flex-direction: column;
            overflow: hidden;
            resize: both;
            min-width: 200px;
            min-height: 150px;
        }

        .window.active {
            z-index: 2000;
        }

        .window-title-bar {
            background: var(--window-title-bar-bg);
            color: var(--text-color-light);
            padding: 8px 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: move;
            flex-shrink: 0;
        }

        .window-title-buttons {
            display: flex;
            gap: 2px;
        }

        .window-title-buttons button {
            background: transparent;
            border: none;
            color: var(--text-color-light);
            font-size: 16px;
            cursor: pointer;
            width: 32px;
            height: 24px;
            transition: background 0.2s;
        }

        .window-title-buttons button:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        .window-title-buttons .close-btn:hover {
            background-color: #e81123;
        }

        .window-content {
            padding: 16px;
            color: var(--text-color-dark);
            flex-grow: 1;
            overflow: auto;
        }

        /* Calculator Specific Styles */
        .calculator-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-gap: 10px;
            padding: 10px;
            background-color: #202020;
        }

        .calculator-display {
            grid-column: 1 / -1;
            background-color: #444;
            color: white;
            padding: 10px;
            text-align: right;
            font-size: 2em;
            word-wrap: break-word;
            word-break: break-all;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            margin-bottom: 10px;
        }

        .calculator-button {
            padding: 20px;
            font-size: 1.5em;
            background-color: #333;
            border: none;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .calculator-button.operator {
            background-color: #4CAF50;
        }
        .calculator-button.equals {
            background-color: #0078d7;
        }

        .calculator-button:hover {
            background-color: #555;
        }
        .calculator-button.operator:hover {
            background-color: #66bb6a;
        }
        .calculator-button.equals:hover {
            background-color: #005a9e;
        }

        /* Task Manager */
        .task-manager-content {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .task-manager-nav {
            display: flex;
            background: #3a3a3a;
            border-bottom: 1px solid #555;
        }

        .task-manager-nav-item {
            padding: 10px 15px;
            cursor: pointer;
            font-size: 14px;
            color: #ccc;
            border-right: 1px solid #555;
            transition: background 0.2s;
        }

        .task-manager-nav-item.active {
            background: var(--window-bg);
            color: var(--text-color-dark);
            border-bottom: none;
        }

        .task-manager-nav-item:hover {
            background: #444;
        }

        .task-manager-process-list {
            flex-grow: 1;
            overflow-y: auto;
            background: #2c2c2c;
            padding: 10px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .task-manager-process {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px;
            border-bottom: 1px solid #3d3d3d;
        }

        .task-manager-process-name {
            font-weight: bold;
        }

        .task-manager-process-status {
            color: #aaa;
        }

        /* Shutdown Screen */
        #shutdown-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #fff;
            z-index: 3000;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }

        #shutdown-screen.visible {
            opacity: 1;
            display: flex;
        }

        #shutdown-screen .logo img {
            width: 100px;
            margin-bottom: 20px;
        }

        #shutdown-screen .loader {
            display: flex;
            align-items: center;
            font-size: 1.2em;
        }

        #shutdown-screen .loading-dots span {
            display: inline-block;
            width: 6px;
            height: 6px;
            background-color: #fff;
            border-radius: 50%;
            margin: 0 3px;
            opacity: 0;
            animation: fadeDot 1.5s infinite;
        }

        #shutdown-screen .loading-dots span:nth-child(1) {
            animation-delay: 0s;
        }

        #shutdown-screen .loading-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }

        #shutdown-screen .loading-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes fadeDot {
            0%, 100% { opacity: 0; }
            50% { opacity: 1; }
        }

        /* Task View */
        #task-view {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            display: none;
            flex-direction: column;
            padding: 20px;
            z-index: 3000;
        }

        .task-view-top {
            display: flex;
            justify-content: flex-end;
        }

        .task-view-top .close-btn {
            background: transparent;
            color: #fff;
            border: none;
            font-size: 2em;
            cursor: pointer;
            padding: 5px 15px;
            transition: background 0.2s;
        }

        .task-view-top .close-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        #task-view-windows {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            align-items: center;
            flex-grow: 1;
        }

        .task-view-window-thumb {
            width: 250px;
            height: 180px;
            background: var(--window-bg);
            border: 2px solid #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: transform 0.2s;
        }

        .task-view-window-thumb:hover {
            transform: scale(1.05);
        }

        .task-view-window-thumb .window-thumb-title {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.5);
            color: #fff;
            padding: 5px;
            text-align: center;
            font-size: 0.9em;
        }

        .task-view-bottom {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            justify-content: center;
        }

        .task-view-bottom button {
            background: #0078d7;
            color: #fff;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
        }

        .task-view-bottom button:hover {
            background: #005a9e;
        }
    </style>
</head>
<body>
    <div id="login-screen">
        <div class="login-box" role="dialog" aria-modal="true" aria-labelledby="login-heading">
            <h1 id="login-heading">User</h1>
            <i class="fas fa-user-circle user-icon"></i>
            <div class="input-group">
                <input type="password" id="password-input" placeholder="Password" aria-label="Password">
                <button id="login-btn" aria-label="Log in"><i class="fas fa-arrow-right"></i></button>
            </div>
            <p id="login-message" role="alert" style="color: #e81123; display: none;">Incorrect password. Try "password".</p>
        </div>
    </div>

    <div class="desktop-container" id="desktop-container" style="display: none;">
        <div class="desktop active" id="desktop-1">
            <div class="icon" id="documents-icon" data-window-target="#documents-window" data-taskbar-id="documents-taskbar-item" role="button" tabindex="0">
                <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-documents-logo.png?raw=true" alt="Documents icon">
                <span>Documents</span>
            </div>
            <div class="icon" id="file-explorer-icon" data-window-target="#file-explorer-window" data-taskbar-id="file-explorer-taskbar-item" role="button" tabindex="0">
                <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-file-explorer.png?raw=true" alt="File Explorer icon">
                <span>File Explorer</span>
            </div>
            <div class="icon" id="edge-icon" data-window-target="#edge-window" data-taskbar-id="edge-taskbar-item" role="button" tabindex="0">
                <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/microsoft-edge-logo-removebg-preview.png?raw=true" alt="Microsoft Edge icon">
                <span>Microsoft Edge</span>
            </div>
            <div class="icon" id="spotify-icon" data-window-target="#spotify-window" data-taskbar-id="spotify-taskbar-item" role="button" tabindex="0">
                <img src="https://img.icons8.com/fluency/96/spotify.png" alt="Spotify icon">
                <span>Spotify</span>
            </div>
            <div class="icon" id="vscode-icon" data-window-target="#vscode-window" data-taskbar-id="vscode-taskbar-item" role="button" tabindex="0">
                <img src="https://img.icons8.com/fluency/96/visual-studio-code-2019.png" alt="Visual Studio Code icon">
                <span>Visual Studio Code</span>
            </div>
        </div>

        <div class="taskbar">
            <div class="taskbar-start" id="start-button" role="button" aria-expanded="false" aria-controls="start-menu" tabindex="0">
                <img src="https://img.icons8.com/color/96/000000/windows-10.png" alt="Start">
            </div>
            <div class="taskbar-item" id="task-view-button" role="button" aria-label="Task View" tabindex="0">
                <i class="fa-solid fa-layer-group"></i>
            </div>
            <div class="taskbar-search" id="cortana-button" role="search" aria-label="Search" tabindex="0">
                <i class="fa-solid fa-magnifying-glass"></i>
                <input type="text" id="taskbar-search-input" placeholder="Type here to search...">
            </div>
            <div class="taskbar-icons" role="toolbar" aria-label="Running applications">
                </div>
            <div class="taskbar-right">
                <div class="taskbar-notification" role="button" aria-label="Notifications" tabindex="0">
                    <i class="fa-regular fa-bell"></i>
                </div>
                <div class="taskbar-time" id="taskbarTime" role="timer" aria-live="polite"></div>
            </div>
        </div>

        <div class="start-menu" id="start-menu" role="menu" aria-hidden="true" style="display: none;">
            <div class="start-menu-left">
                <div class="start-menu-power power-icon" id="shutdown-button" role="menuitem" aria-label="Power" tabindex="0">
                    <i class="fa-solid fa-power-off"></i>
                </div>
            </div>
            <div class="start-menu-right">
                <div class="start-menu-header">All Apps</div>
                <div class="start-menu-apps">
                    <div class="start-menu-app" data-window-target="#file-explorer-window" data-taskbar-id="file-explorer-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-file-explorer.png?raw=true" alt="File Explorer app icon">
                        <span>File Explorer</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#settings-window" data-taskbar-id="settings-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://img.icons8.com/color/48/000000/settings.png" alt="Settings app icon">
                        <span>Settings</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#task-manager-window" data-taskbar-id="task-manager-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/task-manager.png?raw=true" alt="Task Manager app icon">
                        <span>Task Manager</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#calculator-window" data-taskbar-id="calculator-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://img.icons8.com/fluency/48/calculator.png" alt="Calculator app icon">
                        <span>Calculator</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#documents-window" data-taskbar-id="documents-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-documents-logo.png?raw=true" alt="Documents app icon">
                        <span>Documents</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#edge-window" data-taskbar-id="edge-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/microsoft-edge-logo-removebg-preview.png?raw=true" alt="Microsoft Edge app icon">
                        <span>Microsoft Edge</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#spotify-window" data-taskbar-id="spotify-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://img.icons8.com/fluency/48/spotify.png" alt="Spotify app icon">
                        <span>Spotify</span>
                    </div>
                    <div class="start-menu-app" data-window-target="#vscode-window" data-taskbar-id="vscode-taskbar-item" role="menuitem" tabindex="0">
                        <img src="https://img.icons8.com/fluency/48/visual-studio-code-2019.png" alt="Visual Studio Code app icon">
                        <span>Visual Studio Code</span>
                    </div>
                </div>
                <div class="start-menu-tiles">
                    <div class="tile tile-medium" data-window-target="#weather-window" data-taskbar-id="weather-taskbar-item" style="background: #008298;" role="button" tabindex="0">
                        <div class="tile-content">Weather</div>
                    </div>
                    <div class="tile tile-small" style="background: #e61d5f;" role="button" tabindex="0">
                        <div class="tile-content">Photos</div>
                    </div>
                    <div class="tile tile-small" style="background: #00b9f1;" role="button" tabindex="0">
                        <div class="tile-content">News</div>
                    </div>
                    <div class="tile tile-wide" style="background: #7a1d7a;" role="button" tabindex="0">
                        <div class="tile-content">Store</div>
                    </div>
                    <div class="tile tile-medium" style="background: #202020;" role="button" tabindex="0">
                        <div class="tile-content">Mail</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="window" id="file-explorer-window" data-taskbar-id="file-explorer-taskbar-item" data-app-icon="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-file-explorer.png?raw=true" data-desktop="desktop-1" role="dialog" aria-labelledby="file-explorer-title">
        <div class="window-title-bar">
            <span id="file-explorer-title">File Explorer</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <p>This is the File Explorer window.</p>
        </div>
    </div>

    <div class="window" id="documents-window" data-taskbar-id="documents-taskbar-item" data-app-icon="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-documents-logo.png?raw=true" data-desktop="desktop-1" role="dialog" aria-labelledby="documents-title">
        <div class="window-title-bar">
            <span id="documents-title">Documents</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <p>Welcome to your documents!</p>
        </div>
    </div>

    <div class="window" id="settings-window" data-taskbar-id="settings-taskbar-item" data-app-icon="https://img.icons8.com/color/48/000000/settings.png" data-desktop="desktop-1" role="dialog" aria-labelledby="settings-title">
        <div class="window-title-bar">
            <span id="settings-title">Settings</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <p>This is the Settings window.</p>
        </div>
    </div>

    <div class="window" id="task-manager-window" data-taskbar-id="task-manager-taskbar-item" data-app-icon="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/task-manager.png?raw=true" style="width: 600px; height: 450px;" data-desktop="desktop-1" role="dialog" aria-labelledby="task-manager-title">
        <div class="window-title-bar">
            <span id="task-manager-title">Task Manager</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content task-manager-content">
            <div class="task-manager-nav" role="tablist">
                <div class="task-manager-nav-item active" role="tab" aria-controls="processes-tab" tabindex="0">Processes</div>
                <div class="task-manager-nav-item" role="tab" aria-controls="performance-tab" tabindex="-1">Performance</div>
            </div>
            <div class="task-manager-process-list" id="processes-tab" role="tabpanel">
                </div>
        </div>
    </div>

    <div class="window" id="calculator-window" data-taskbar-id="calculator-taskbar-item" data-app-icon="https://img.icons8.com/fluency/48/calculator.png" style="width: 350px; height: 500px;" data-desktop="desktop-1" role="dialog" aria-labelledby="calculator-title">
        <div class="window-title-bar">
            <span id="calculator-title">Calculator</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <div class="calculator-display" id="calculator-display" aria-live="polite">0</div>
            <div class="calculator-grid">
                <button class="calculator-button clear">C</button>
                <button class="calculator-button operator">/</button>
                <button class="calculator-button operator">*</button>
                <button class="calculator-button operator">-</button>
                <button class="calculator-button number">7</button>
                <button class="calculator-button number">8</button>
                <button class="calculator-button number">9</button>
                <button class="calculator-button operator">+</button>
                <button class="calculator-button number">4</button>
                <button class="calculator-button number">5</button>
                <button class="calculator-button number">6</button>
                <button class="calculator-button equals" id="equals-button">=</button>
                <button class="calculator-button number">1</button>
                <button class="calculator-button number">2</button>
                <button class="calculator-button number">3</button>
                <button class="calculator-button number" style="grid-column: span 2;">0</button>
                <button class="calculator-button number">.</button>
            </div>
        </div>
    </div>

    <div class="window" id="edge-window" data-taskbar-id="edge-taskbar-item" data-app-icon="https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/microsoft-edge-logo-removebg-preview.png?raw=true" data-desktop="desktop-1" role="dialog" aria-labelledby="edge-title">
        <div class="window-title-bar">
            <span id="edge-title">Microsoft Edge</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <p>Welcome to Microsoft Edge! This is a simple browser mockup.</p>
        </div>
    </div>

    <div class="window" id="spotify-window" data-taskbar-id="spotify-taskbar-item" data-app-icon="https://img.icons8.com/fluency/96/spotify.png" data-desktop="desktop-1" role="dialog" aria-labelledby="spotify-title">
        <div class="window-title-bar">
            <span id="spotify-title">Spotify</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <p>Welcome to Spotify! Start listening to your favorite music.</p>
        </div>
    </div>

    <div class="window" id="vscode-window" data-taskbar-id="vscode-taskbar-item" data-app-icon="https://img.icons8.com/fluency/96/visual-studio-code-2019.png" data-desktop="desktop-1" role="dialog" aria-labelledby="vscode-title">
        <div class="window-title-bar">
            <span id="vscode-title">Visual Studio Code</span>
            <div class="window-title-buttons">
                <button class="minimize-btn" aria-label="Minimize"><i class="fas fa-window-minimize"></i></button>
                <button class="maximize-btn" aria-label="Maximize"><i class="fas fa-window-maximize"></i></button>
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content">
            <p>Welcome to Visual Studio Code! Start writing code.</p>
        </div>
    </div>

    <div class="window" id="cortana-response-window" data-taskbar-id="cortana-taskbar-item" data-app-icon="https://img.icons8.com/windows/96/000000/search.png" style="width: 400px; height: 200px; display: none;" role="dialog" aria-labelledby="cortana-response-title">
        <div class="window-title-bar">
            <span id="cortana-response-title">Search Results</span>
            <div class="window-title-buttons">
                <button class="close-btn" aria-label="Close"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="window-content" id="cortana-response-content">
            <p>Hello! How can I help you today?</p>
        </div>
    </div>

    <div id="cortana-flyout" role="menu" aria-hidden="true" style="display: none;">
        <div class="cortana-search-box">
            <i class="fa-solid fa-microphone" aria-hidden="true"></i>
            <input type="text" id="cortana-input" placeholder="Ask me anything" aria-label="Search or ask anything">
        </div>
    </div>

    <div id="task-view" role="dialog" aria-modal="true" aria-labelledby="task-view-title" style="display: none;">
        <div class="task-view-top">
            <button class="close-btn" id="task-view-close" aria-label="Close Task View">&times;</button>
        </div>
        <div id="task-view-windows" role="group" aria-label="Open Windows">
        </div>
        <div class="task-view-bottom">
            <button id="add-desktop-btn" aria-label="New desktop">+ New desktop</button>
        </div>
    </div>

    <div id="shutdown-screen" style="display: none;">
        <div class="logo">
            <img src="https://img.icons8.com/color/96/000000/windows-10.png" alt="Windows Logo">
        </div>
        <div class="loader">
            Shutting down
            <div class="loading-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const loginScreen = document.getElementById('login-screen');
            const loginBtn = document.getElementById('login-btn');
            const passwordInput = document.getElementById('password-input');
            const loginMessage = document.getElementById('login-message');
            const desktopContainer = document.getElementById('desktop-container');
            const startMenu = document.getElementById('start-menu');
            const startButton = document.getElementById('start-button');
            const windows = document.querySelectorAll('.window');
            const taskbarTime = document.getElementById('taskbarTime');
            const shutdownButton = document.getElementById('shutdown-button');
            const shutdownScreen = document.getElementById('shutdown-screen');
            const taskbarIconsContainer = document.querySelector('.taskbar-icons');
            const taskViewButton = document.getElementById('task-view-button');
            const taskView = document.getElementById('task-view');
            const taskViewWindowsContainer = document.getElementById('task-view-windows');
            const taskViewCloseBtn = document.getElementById('task-view-close');
            const cortanaButton = document.getElementById('cortana-button');
            const cortanaFlyout = document.getElementById('cortana-flyout');
            const cortanaInput = document.getElementById('cortana-input');
            const addDesktopBtn = document.getElementById('add-desktop-btn');
            const taskManagerProcessesList = document.getElementById('processes-tab');

            let zIndexCounter = 2000;
            const desktops = {};
            document.querySelectorAll('.desktop').forEach(d => {
                desktops[d.id] = d;
            });
            let currentDesktopId = 'desktop-1';
            let maximizedWindows = new Map();
            const currentProcesses = {};
            const pinnedApps = [
                {
                    id: 'documents-taskbar-item',
                    windowTarget: '#documents-window',
                    icon: 'https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-documents-logo.png?raw=true',
                    alt: 'Documents',
                    name: 'Documents'
                },
                {
                    id: 'file-explorer-taskbar-item',
                    windowTarget: '#file-explorer-window',
                    icon: 'https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/windows-10-file-explorer.png?raw=true',
                    alt: 'File Explorer',
                    name: 'File Explorer'
                },
                {
                    id: 'edge-taskbar-item',
                    windowTarget: '#edge-window',
                    icon: 'https://github.com/087n7/Windows-10-Windows-XP-etc-Website-VM/blob/main/microsoft-edge-logo-removebg-preview.png?raw=true',
                    alt: 'Microsoft Edge',
                    name: 'Microsoft Edge'
                },
                {
                    id: 'spotify-taskbar-item',
                    windowTarget: '#spotify-window',
                    icon: 'https://img.icons8.com/fluency/96/spotify.png',
                    alt: 'Spotify',
                    name: 'Spotify'
                },
                {
                    id: 'vscode-taskbar-item',
                    windowTarget: '#vscode-window',
                    icon: 'https://img.icons8.com/fluency/96/visual-studio-code-2019.png',
                    alt: 'Visual Studio Code',
                    name: 'Visual Studio Code'
                }
            ];
            
            // Function to render pinned apps on the taskbar
            function renderPinnedApps() {
                const pinnedContainer = document.createElement('div');
                pinnedContainer.className = 'taskbar-pinned';
                
                pinnedApps.forEach(app => {
                    const item = document.createElement('div');
                    item.className = 'taskbar-item';
                    item.id = app.id;
                    item.dataset.windowTarget = app.windowTarget;
                    item.innerHTML = `<img src="${app.icon}" alt="${app.alt}">`;
                    
                    item.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const windowEl = document.querySelector(item.dataset.windowTarget);
                        if (windowEl) {
                            openWindow(windowEl);
                        }
                    });
                    
                    pinnedContainer.appendChild(item);
                });
                
                taskbarIconsContainer.insertAdjacentElement('beforebegin', pinnedContainer);
            }
            renderPinnedApps();
            
            // --- Login Functionality ---
            const handleLogin = (e) => {
                if (e) e.preventDefault();

                if (passwordInput.value === 'password') {
                    loginScreen.classList.add('fade-out');
                    setTimeout(() => {
                        loginScreen.style.display = 'none';
                        desktopContainer.style.display = 'block';
                    }, 500);
                    loginMessage.style.display = 'none';
                } else {
                    loginMessage.style.display = 'block';
                }
            };

            loginBtn.addEventListener('click', handleLogin);
            passwordInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    handleLogin(e);
                }
            });

            // --- Time and Date ---
            function updateTime() {
                const now = new Date();
                const timeStr = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const dateStr = now.toLocaleDateString();
                if (taskbarTime) {
                    taskbarTime.innerHTML = `<span>${timeStr}</span><span>${dateStr}</span>`;
                }
            }
            updateTime();
            setInterval(updateTime, 1000);

            // --- Start Menu & Cortana Toggling ---
            const toggleStartMenu = (e) => {
                e.stopPropagation();
                if (startMenu.style.display === 'flex') {
                    startMenu.style.display = 'none';
                    startButton.setAttribute('aria-expanded', 'false');
                } else {
                    startMenu.style.display = 'flex';
                    cortanaFlyout.style.display = 'none';
                    startButton.setAttribute('aria-expanded', 'true');
                }
            };

            const toggleCortanaFlyout = (e) => {
                e.stopPropagation();
                if (cortanaFlyout.style.display === 'flex') {
                    cortanaFlyout.style.display = 'none';
                    cortanaButton.setAttribute('aria-expanded', 'false');
                } else {
                    cortanaFlyout.style.display = 'flex';
                    startMenu.style.display = 'none';
                    cortanaButton.setAttribute('aria-expanded', 'true');
                }
            };

            startButton.addEventListener('click', toggleStartMenu);
            cortanaButton.addEventListener('click', toggleCortanaFlyout);

            document.addEventListener('click', (e) => {
                if (startMenu.style.display === 'flex' && !startMenu.contains(e.target) && !startButton.contains(e.target)) {
                    startMenu.style.display = 'none';
                    startButton.setAttribute('aria-expanded', 'false');
                }
                if (cortanaFlyout.style.display === 'flex' && !cortanaFlyout.contains(e.target) && !cortanaButton.contains(e.target)) {
                    cortanaFlyout.style.display = 'none';
                    cortanaButton.setAttribute('aria-expanded', 'false');
                }
            });

            // Cortana input handler
            cortanaInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    const query = cortanaInput.value.toLowerCase();
                    let response = "Sorry, I can't help with that right now.";
                    let title = "Search Results";

                    // Handle simple math with floating-point numbers
                    const mathMatch = query.match(/(\d+(\.\d+)?)\s*([+\-*/])\s*(\d+(\.\d+)?)/);
                    if (mathMatch) {
                        const num1 = parseFloat(mathMatch[1]);
                        const operator = mathMatch[3];
                        const num2 = parseFloat(mathMatch[4]);
                        let result;
                        try {
                            switch (operator) {
                                case '+': result = num1 + num2; break;
                                case '-': result = num1 - num2; break;
                                case '*': result = num1 * num2; break;
                                case '/':
                                    if (num2 === 0) {
                                        response = "Cannot divide by zero.";
                                    } else {
                                        result = num1 / num2;
                                    }
                                    break;
                            }
                            if (result !== undefined) {
                                response = `The answer is ${result}.`;
                                title = "Calculation";
                            }
                        } catch (e) {
                            response = "I couldn't perform that calculation.";
                        }
                    } else if (query.includes("open calculator")) {
                        const calcWindow = document.getElementById('calculator-window');
                        if (calcWindow) {
                            openWindow(calcWindow);
                            cortanaFlyout.style.display = 'none';
                            cortanaInput.value = '';
                            return;
                        }
                    } else if (query.includes("what is your name")) {
                        response = "I am a helpful assistant created by Google.";
                    } else if (query.includes("hello") || query.includes("hi")) {
                        response = "Hello! How can I help you today?";
                    }

                    showCortanaResponse(title, response);
                    cortanaFlyout.style.display = 'none';
                    cortanaInput.value = '';
                }
            });

            function showCortanaResponse(title, content) {
                const responseWindow = document.getElementById('cortana-response-window');
                const responseContent = document.getElementById('cortana-response-content');
                const responseTitle = responseWindow.querySelector('.window-title-bar span');

                responseTitle.textContent = title;
                responseContent.innerHTML = `<p>${content}</p>`;
                openWindow(responseWindow);
            }

            // --- Task View (Virtual Desktops) ---
            function showTaskView() {
                taskView.style.display = 'flex';
                taskViewWindowsContainer.innerHTML = ''; // Clear previous thumbnails

                const allWindows = document.querySelectorAll('.window');
                allWindows.forEach(win => {
                    if (win.dataset.desktop === currentDesktopId) {
                        const thumb = document.createElement('div');
                        thumb.className = 'task-view-window-thumb';
                        thumb.dataset.windowId = win.id;
                        thumb.dataset.desktopId = win.dataset.desktop;
                        thumb.innerHTML = `<div class="window-thumb-title">${win.querySelector('.window-title-bar span').textContent}</div>`;

                        thumb.addEventListener('click', () => {
                            hideTaskView();
                            const targetWindow = document.getElementById(thumb.dataset.windowId);
                            if (targetWindow) {
                                openWindow(targetWindow);
                            }
                        });

                        taskViewWindowsContainer.appendChild(thumb);
                    }
                });
            }

            function hideTaskView() {
                taskView.style.display = 'none';
            }

            function switchToDesktop(desktopId) {
                document.querySelectorAll('.desktop').forEach(d => {
                    d.style.display = 'none';
                });
                const targetDesktop = document.getElementById(desktopId);
                if (targetDesktop) {
                    targetDesktop.style.display = 'grid';
                    currentDesktopId = desktopId;
                }
            }

            taskViewButton.addEventListener('click', showTaskView);
            taskViewCloseBtn.addEventListener('click', hideTaskView);

            addDesktopBtn.addEventListener('click', () => {
                const newDesktopId = `desktop-${Object.keys(desktops).length + 1}`;
                const newDesktopEl = document.createElement('div');
                newDesktopEl.id = newDesktopId;
                newDesktopEl.className = 'desktop virtual-desktop';
                desktopContainer.appendChild(newDesktopEl);
                desktops[newDesktopId] = newDesktopEl;

                switchToDesktop(newDesktopId);
                hideTaskView();
            });

            // --- Combined Keyboard Shortcuts ---
            document.addEventListener('keydown', (e) => {
                // Task View
                if (e.ctrlKey && e.key === 'Tab') {
                    e.preventDefault();
                    if (taskView.style.display === 'flex') {
                        hideTaskView();
                    } else {
                        showTaskView();
                    }
                } else if (e.key === 'Escape' && taskView.style.display === 'flex') {
                    hideTaskView();
                }
                
                // Task Manager
                if (e.ctrlKey && e.shiftKey && e.key === 'Escape') {
                    e.preventDefault();
                    const taskManagerWindow = document.getElementById('task-manager-window');
                    openWindow(taskManagerWindow);
                }
            });

            // --- Dynamic Taskbar & Window Management ---
            function openWindow(windowEl) {
                const taskbarId = windowEl.dataset.taskbarId;
                let taskbarItem = document.getElementById(taskbarId);
                
                if (!taskbarItem) {
                    const iconUrl = windowEl.dataset.app-icon;
                    taskbarItem = document.createElement('div');
                    taskbarItem.className = 'taskbar-item';
                    taskbarItem.id = taskbarId;
                    taskbarItem.innerHTML = `<img src="${iconUrl}" alt="${windowEl.id}">`;

                    taskbarItem.addEventListener('click', () => {
                        if (windowEl.style.display === 'flex' && windowEl.classList.contains('active')) {
                            windowEl.style.display = 'none';
                            taskbarItem.classList.remove('active');
                        } else {
                            windows.forEach(win => {
                                win.classList.remove('active');
                            });
                            document.querySelectorAll('.taskbar-item').forEach(item => item.classList.remove('active'));
                            taskbarItem.classList.add('active');
                            windowEl.classList.add('active');
                            windowEl.style.display = 'flex';
                            windowEl.style.zIndex = zIndexCounter++;
                        }
                    });
                    taskbarIconsContainer.appendChild(taskbarItem);
                }

                // Update z-index for all windows
                windows.forEach(win => {
                    win.classList.remove('active');
                });
                document.querySelectorAll('.taskbar-item').forEach(item => item.classList.remove('active'));
                
                windowEl.style.display = 'flex';
                windowEl.classList.add('active');
                taskbarItem.classList.add('active');
                windowEl.style.zIndex = zIndexCounter++;
                startMenu.style.display = 'none';
                cortanaFlyout.style.display = 'none';

                if (!windowEl.dataset.hasOpened) {
                    const maxX = Math.max(0, window.innerWidth - windowEl.offsetWidth - 100);
                    const maxY = Math.max(0, window.innerHeight - windowEl.offsetHeight - 100 - 56);
                    const posX = Math.floor(Math.random() * maxX);
                    const posY = Math.floor(Math.random() * maxY);
                    windowEl.style.left = `${posX}px`;
                    windowEl.style.top = `${posY}px`;
                    windowEl.dataset.hasOpened = true;
                }
                
                // Add the new process
                if (!currentProcesses[windowEl.id]) {
                    const processName = windowEl.querySelector('.window-title-bar span').textContent;
                    currentProcesses[windowEl.id] = { name: processName, status: 'Running' };
                }
                renderProcesses();
            }

            // New function to render the Task Manager process list
            function renderProcesses() {
                taskManagerProcessesList.innerHTML = '';
                for (const id in currentProcesses) {
                    const process = currentProcesses[id];
                    const processEl = document.createElement('div');
                    processEl.className = 'task-manager-process';
                    processEl.innerHTML = `
                        <span class="task-manager-process-name">${process.name}</span>
                        <span class="task-manager-process-status">${process.status}</span>
                    `;
                    taskManagerProcessesList.appendChild(processEl);
                }
            }

            document.addEventListener('click', (e) => {
                const windowTarget = e.target.closest('[data-window-target]');
                if (windowTarget) {
                    const windowId = windowTarget.dataset.window-target;
                    const windowEl = document.querySelector(windowId);
                    if (windowEl) {
                        openWindow(windowEl);
                    }
                    return;
                }

                const closeBtn = e.target.closest('.close-btn');
                const minimizeBtn = e.target.closest('.minimize-btn');
                const maximizeBtn = e.target.closest('.maximize-btn');
                const windowEl = e.target.closest('.window');

                if (closeBtn && windowEl) {
                    const taskbarId = windowEl.dataset.taskbar-id;
                    const taskbarItem = document.getElementById(taskbarId);
                    windowEl.style.display = 'none';
                    if (taskbarItem) {
                        const isPinned = pinnedApps.some(app => app.id === taskbarId);
                        const openWindows = document.querySelectorAll(`.window[data-taskbar-id="${taskbarId}"][style*="display: flex"]`);
                        
                        if (!isPinned && openWindows.length === 0) {
                            taskbarItem.remove();
                        }
                    }
                    delete currentProcesses[windowEl.id];
                    renderProcesses();
                } else if (minimizeBtn && windowEl) {
                    windowEl.style.display = 'none';
                    windowEl.classList.remove('active');
                    const taskbarId = windowEl.dataset.taskbar-id;
                    const taskbarItem = document.getElementById(taskbarId);
                    if (taskbarItem) taskbarItem.classList.remove('active');
                } else if (maximizeBtn && windowEl) {
                    if (windowEl.classList.contains('maximized')) {
                        const originalState = JSON.parse(windowEl.dataset.originalState);
                        if (originalState) {
                            windowEl.style.top = originalState.top;
                            windowEl.style.left = originalState.left;
                            windowEl.style.width = originalState.width;
                            windowEl.style.height = originalState.height;
                            windowEl.classList.remove('maximized');
                        }
                    } else {
                        const rect = windowEl.getBoundingClientRect();
                        windowEl.dataset.originalState = JSON.stringify({
                            top: `${rect.top}px`,
                            left: `${rect.left}px`,
                            width: `${rect.width}px`,
                            height: `${rect.height}px`
                        });
                        windowEl.style.top = '0';
                        windowEl.style.left = '0';
                        windowEl.style.width = '100vw';
                        windowEl.style.height = 'calc(100vh - 56px)';
                        windowEl.classList.add('maximized');
                    }
                }
            });

            // --- Window Dragging ---
            let activeWindow = null;
            let initialMouseX, initialMouseY, initialWindowX, initialWindowY;

            document.addEventListener('mousedown', (e) => {
                const titleBar = e.target.closest('.window-title-bar');
                if (!titleBar || e.target.tagName === 'BUTTON') return;

                activeWindow = titleBar.closest('.window');
                if (activeWindow.classList.contains('maximized')) return;

                initialMouseX = e.clientX;
                initialMouseY = e.clientY;
                initialWindowX = activeWindow.offsetLeft;
                initialWindowY = activeWindow.offsetTop;

                const onMouseMove = (e) => {
                    if (!activeWindow) return;

                    let dx = e.clientX - initialMouseX;
                    let dy = e.clientY - initialMouseY;

                    let newX = initialWindowX + dx;
                    let newY = initialWindowY + dy;

                    // Constrain window to the viewport
                    newX = Math.max(0, Math.min(window.innerWidth - activeWindow.offsetWidth, newX));
                    newY = Math.max(0, Math.min(window.innerHeight - activeWindow.offsetHeight - 56, newY));

                    activeWindow.style.left = `${newX}px`;
                    activeWindow.style.top = `${newY}px`;
                };

                const onMouseUp = () => {
                    document.removeEventListener('mousemove', onMouseMove);
                    document.removeEventListener('mouseup', onMouseUp);
                    activeWindow = null;
                };

                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
            });

            // --- Shutdown button ---
            shutdownButton.addEventListener('click', () => {
                const result = confirm("Are you sure you want to shut down?");
                if (result) {
                    desktopContainer.style.display = 'none';
                    shutdownScreen.classList.add('visible');

                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                }
            });

            // --- Calculator Logic ---
            const calculatorWindow = document.getElementById('calculator-window');
            if (calculatorWindow) {
                const display = document.getElementById('calculator-display');
                const buttons = calculatorWindow.querySelectorAll('.calculator-button');
                let currentInput = '0';
                let firstOperand = null;
                let operator = null;
                let expectingSecondOperand = false;

                function updateDisplay() {
                    display.textContent = currentInput;
                }

                buttons.forEach(button => {
                    button.addEventListener('click', () => {
                        const value = button.textContent;

                        if (button.classList.contains('number')) {
                            if (expectingSecondOperand) {
                                currentInput = value;
                                expectingSecondOperand = false;
                            } else {
                                currentInput = currentInput === '0' ? value : currentInput + value;
                            }
                        } else if (button.classList.contains('operator')) {
                            if (firstOperand === null) {
                                firstOperand = parseFloat(currentInput);
                            } else if (operator) {
                                const result = performCalculation();
                                currentInput = result.toString();
                                firstOperand = result;
                            }
                            operator = value;
                            expectingSecondOperand = true;
                        } else if (button.classList.contains('clear')) {
                            currentInput = '0';
                            firstOperand = null;
                            operator = null;
                            expectingSecondOperand = false;
                        } else if (value === '.') {
                            if (!currentInput.includes('.')) {
                                currentInput += '.';
                            }
                        } else if (value === '=') {
                            if (operator && firstOperand !== null) {
                                currentInput = performCalculation().toString();
                                if (currentInput === 'Error') {
                                    firstOperand = null;
                                    operator = null;
                                } else {
                                    firstOperand = parseFloat(currentInput);
                                }
                                expectingSecondOperand = true;
                            }
                        }
                        updateDisplay();
                    });
                });

                function performCalculation() {
                    const secondOperand = parseFloat(currentInput);
                    if (operator === '+') return firstOperand + secondOperand;
                    if (operator === '-') return firstOperand - secondOperand;
                    if (operator === '*') return firstOperand * secondOperand;
                    if (operator === '/') {
                        if (secondOperand === 0) {
                            return 'Error';
                        }
                        return firstOperand / secondOperand;
                    }
                    return parseFloat(currentInput);
                }
            }
        });
    </script>
</body>
</html>
